version: "3.8"

services:
  backend:
    build: .
    restart: always
    image: apteryx/docker_traefik_tiangolo:v1
    env_file:
      - ..env
    labels:
      # Enable Traefik for this specific "backend" service
      - traefik.enable=true
      # Define the port inside of the Docker service to use
      - traefik.http.services.{{cookiecutter.pkg_name}}.loadbalancer.server.port=80
      # Make Traefik use this domain in HTTP
      - traefik.http.routers.{{cookiecutter.pkg_name}}-http.entrypoints=http
      - traefik.http.routers.{{cookiecutter.pkg_name}}-http.rule=Host(`kikididi.io`)
      # Use the traefik-public network (declared below)
      - traefik.docker.network=traefik-public
      # Make Traefik use this domain in HTTPS
      - traefik.http.routers.{{cookiecutter.pkg_name}}-https.entrypoints=https
      - traefik.http.routers.{{cookiecutter.pkg_name}}-https.rule=Host(`kikididi.io`)
      - traefik.http.routers.{{cookiecutter.pkg_name}}-https.tls=true
      # Use the "le" (Let's Encrypt) resolver
      - traefik.http.routers.{{cookiecutter.pkg_name}}-https.tls.certresolver=le
      # https-redirect middleware to redirect HTTP to HTTPS
      - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
      - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
      # Middleware to redirect HTTP to HTTPS
      - traefik.http.routers.{{cookiecutter.pkg_name}}-http.middlewares=https-redirect
      - traefik.http.routers.{{cookiecutter.pkg_name}}-https.middlewares=admin-auth
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - traefik-public

networks:
  traefik-public:
    external: true